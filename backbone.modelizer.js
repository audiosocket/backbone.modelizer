// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Backbone.IdentityMap = {
    kinds: {},
    maps: {},
    "for": function(kind) {
      var id, _base;
      id = null;
      _.any(this.kinds, function(value, key) {
        if (value === kind) {
          id = key;
          return true;
        }
      });
      if (id == null) {
        this.kinds[id = _.uniqueId("___identity_map")] = kind;
      }
      return (_base = this.maps)[id] || (_base[id] = {});
    },
    retrieve: function(kind, id) {
      var map;
      map = this["for"](kind);
      return map[id];
    },
    store: function(kind, id, obj) {
      var map;
      map = this["for"](kind);
      if ((map[id] != null) && map[id] !== obj) {
        throw new Error("Model already cached!");
      }
      return map[id] = obj;
    },
    gc: function() {
      return _.each(this.maps, function(map) {
        return _.each(map, function(obj, key) {
          if (obj.refCount === 0) {
            return delete map[key];
          }
        });
      });
    }
  };

  Backbone.Model = (function(_super) {

    __extends(Model, _super);

    Model.name = 'Model';

    function Model(attributes) {
      this.modelize = __bind(this.modelize, this);

      var cached;
      if (_.isNumber(attributes)) {
        attributes = {
          id: attributes
        };
      }
      if ((attributes != null ? attributes.id : void 0) != null) {
        cached = Backbone.IdentityMap.retrieve(this.constructor, attributes.id);
        if (cached != null) {
          if (_.keys(attributes).length > 1) {
            cached.set(attributes);
          }
          return cached;
        }
        Backbone.IdentityMap.store(this.constructor, attributes.id, this);
      }
      Model.__super__.constructor.call(this, attributes);
    }

    Model.prototype.initialize = function(attributes) {
      Model.__super__.initialize.apply(this, arguments);
      return this.modelize(attributes);
    };

    Model.prototype.sync = function(method, model, options) {
      var success,
        _this = this;
      success = options.success;
      options.success = function(attributes, status, xhr) {
        if (attributes != null) {
          return _this.modelize(attributes, options, function() {
            return success(attributes, status, xhr);
          });
        } else {
          return success(attributes, status, xhr);
        }
      };
      return (this._sync || Backbone.sync).call(this, method, model, options);
    };

    Model.prototype.modelize = function(attributes, options, success) {
      var associations, cb,
        _this = this;
      if (_.isFunction(this.associations)) {
        associations = this.associations();
      } else {
        associations = this.associations;
      }
      success = success || function() {};
      if (_.isEmpty(associations)) {
        return success();
      }
      cb = _.after(_.size(associations), success);
      return _.each(associations, function(association, name) {
        var constructor, obj, self;
        if (association.model != null) {
          obj = attributes[name];
          if (_.isNumber(obj)) {
            obj = {
              id: obj
            };
          }
          _this[name] = new association.model(obj);
          attributes[name] = _this[name].id;
        } else {
          if (_this[name] != null) {
            if (_.isArray(attributes[name])) {
              _this[name].reset(attributes[name]);
            }
          } else {
            self = _this;
            constructor = (function(_super1) {

              __extends(constructor, _super1);

              constructor.name = 'constructor';

              function constructor() {
                if (association.url != null) {
                  this.url = association.url;
                }
                if (association.scope != null) {
                  this[association.scope] = self;
                }
                constructor.__super__.constructor.apply(this, arguments);
              }

              return constructor;

            })(association.collection);
            _this[name] = new constructor(attributes[name]);
            if (attributes[name] != null) {
              attributes[name] = _.compact(_.pluck(attributes[name], "id"));
            }
          }
        }
        return cb();
      });
    };

    Model.prototype.refCount = 0;

    Model.prototype.retain = function() {
      ++this.refCount;
      return this;
    };

    Model.prototype.release = function() {
      --this.refCount;
      return this;
    };

    Model.prototype.url = function() {
      var base, sep;
      base = _.isFunction(this.urlRoot) ? this.urlRoot() : this.urlRoot;
      if (base == null) {
        throw new Error('A "urlRoot" property or function must be specified');
      }
      if (this.isNew()) {
        return base;
      }
      sep = base.charAt(base.length - 1) === "/" ? "" : "/";
      return "" + base + sep + (encodeURIComponent(this.id));
    };

    return Model;

  })(Backbone.Model);

}).call(this);
